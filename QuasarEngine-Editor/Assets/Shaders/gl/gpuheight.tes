#version 450 core
layout (quads, fractional_odd_spacing, cw) in;

layout(std140, binding = 0) uniform global_uniform_object  {
    mat4 view;
    mat4 projection;
} global_ubo;

layout(std140, binding = 1) uniform local_uniform_object  {
    mat4 model;
    float heightMult;
    int   uTextureScale;
} object_ubo;

uniform sampler2D heightMap;

layout (location = 0) in vec2 tcTexCoord[];

layout (location = 0) out vec2 vTexCoord;
layout (location = 1) out float fHeight;
layout (location = 2) out vec3  fNormal;

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 t00 = tcTexCoord[0];
    vec2 t01 = tcTexCoord[1];
    vec2 t10 = tcTexCoord[2];
    vec2 t11 = tcTexCoord[3];

    vec2 t0 = mix(t00, t01, u);
    vec2 t1 = mix(t10, t11, u);
    vec2 texCoord = mix(t0,  t1,  v);

    vTexCoord = texCoord;

    fHeight = texture(heightMap, texCoord).r * object_ubo.heightMult;

    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    vec3 uVec = (p01 - p00).xyz;
    vec3 vVec = (p10 - p00).xyz;
    vec3 n    = normalize(cross(vVec, uVec));
    fNormal   = n;

    vec4 p0 = mix(p00, p01, u);
    vec4 p1 = mix(p10, p11, u);
    vec4 p  = mix(p0,  p1,  v) + vec4(n, 0.0) * fHeight;

    gl_Position = global_ubo.projection * global_ubo.view * object_ubo.model * p;
}
